{
  "id": "bd48520e-d2e4-44fa-b202-f7133536fa89",
  "prefix": "etc",
  "description": "",
  "body": "CREATE TABLE #grps\r\n(\r\n  [id] varchar(50),\r\n  [parentid] varchar(50),\r\n  [value] varchar(50)\r\n);\r\n\r\nINSERT INTO #grps\r\n    ([id], [parentid], [value])\r\nVALUES\r\n    ('-5001', '0', 'san pham ong 5001'),\r\n    ('-5002', '-5001', 'san pham cha 5002'),\r\n    ('-5003', '-5002', 'san pham chau 5003'),\r\n    ('-5004', '-5003', 'san pham chit 5004'),\r\n    ('-5005', '0', 'san pham ong 5005'),\r\n    ('-5006', '-5005','san pham cha -5006'),\r\n    ('-5007', '0', null),\r\n    ('-5008', '-5006', 'san pham chau -5008');\r\nDECLARE @ID varchar(50) = '-5004';\r\n\r\nWITH CTE AS\r\n(\r\n    --This is called once to get the minimum and maximum values\r\n    SELECT id, parentid, value\r\n    FROM #grps\r\n    WHERE id= @ID\r\n    UNION ALL\r\n    --This is called multiple times until the condition is met\r\n    --SELECT g.id, g.parentid, g.value\r\n    --FROM CTE c, #grps g\r\n    --WHERE g.id= c.parentid\r\n    --If you don't like commas between tables then you can replace the 2nd select \r\n    --statement with this:\r\n    SELECT g.id, g.parentid, g.value\r\n    FROM CTE c\r\n    INNER JOIN #grps g ON g.id= c.parentid\r\n    --This can also be written with CROSS JOINS! \r\n    --Even though it looks more like another way of writing INNER JOINs.\r\n    --SELECT g.id, g.parentid, g.value\r\n    --FROM CTE c\r\n    --CROSS JOIN grps g\r\n    --WHERE g.id = c.parentid\r\n)\r\n\r\nSELECT * FROM CTE DROP TABLE #grps"
}